## TODO: install vim-tmux-navigator to neovim

# keyboard shortcut to reload tmux configuration
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Config reloaded!"

set -sa terminal-overrides ",xterm*:Tc"
set -g mouse on
set -g prefix ^b

set -g bell-action any
set -g detach-on-destroy off
set -g status-keys vi
set -g set-titles on
set -g set-titles-string 'tmux - #W'
set -g visual-bell off
set -g set-clipboard on

setw -g mode-keys vi
setw -g monitor-activity on

# Notifications
set -g visual-activity on

# History
set -g history-limit 10000

# Quick Escape (for vim)
set -s escape-time 0

# Set bar at top
set -g status-position top
set -g status-justify left
set -g pane-border-status top
set -g pane-border-format ""


# Switch Meta and Cmd keys for macOS

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
# bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
# bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
# bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
# bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind -T copy-mode-vi 'M-h' select-pane -L
bind -T copy-mode-vi 'M-j' select-pane -D
bind -T copy-mode-vi 'M-k' select-pane -U
bind -T copy-mode-vi 'M-l' select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set -g renumber-windows on

# Hotkeys using Alt/Option as a modifier
bind -n M-n new-window -c "#{pane_current_path}"
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9
bind -n M-0 select-window -t :0
bind -n M-. select-window -n
bind -n M-, select-window -p
bind -n M-< swap-window -t -1
bind -n M-> swap-window -t +1

bind -n M-Tab next-window
bind -n M-S-Tab previous-window

bind -n M-x confirm-before "kill-pane"
bind -n M-Q confirm-before "kill-window"
bind -n M-- split-window -v -c "#{pane_current_path}"
bind -n M-\\ split-window -h -c "#{pane_current_path}"
# bind -n M-v split-window -h -c "#{pane_current_path}"
# bind -n M-V split-window -v -c "#{pane_current_path}"
bind -n M-R command-prompt -I "#W" "rename-window '%%'"

# bind -n M-s choose-session
bind -n M-m resize-pane -Z
bind -n M-h select-pane -L
bind -n M-l select-pane -R
bind -n M-k select-pane -U
bind -n M-j select-pane -D
bind -n M-Left resize-pane -L 5
bind -n M-Right resize-pane -R 5
bind -n M-Up resize-pane -U 2
bind -n M-Down resize-pane -D 2

bind -n "M-H" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -L; tmux swap-pane -t $old'
bind -n "M-J" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -D; tmux swap-pane -t $old'
bind -n "M-K" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -U; tmux swap-pane -t $old'
bind -n "M-L" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -R; tmux swap-pane -t $old'
bind -n "M-S-Left" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -L; tmux swap-pane -t $old'
bind -n "M-S-Down" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -D; tmux swap-pane -t $old'
bind -n "M-S-Up" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -U; tmux swap-pane -t $old'
bind -n "M-S-Right" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -R; tmux swap-pane -t $old'

# bind -n M-/ copy-mode
# open copy mode and start searching
bind -n M-/ copy-mode \; send-keys '?'

# linux system clipboard
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
#bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Tmux Session Management
# bind-key "T" run-shell "sesh connect $(
#     sesh list -tz | fzf-tmux -p 55%,60% \
#         --no-sort --border-label ' sesh ' --prompt '‚ö°  ' \
#         --header '  ^a all ^t tmux ^x zoxide ^f find' \
#         --bind 'tab:down,btab:up' \
#         --bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list)' \
#         --bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t)' \
#         --bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z)' \
#         --bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -d 2 -t d -E .Trash . ~)'
# )"

# macOS system clipboard
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
#bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"

# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'

set -g @plugin 'dreamsofcode-io/catppuccin-tmux'
set -g @catppuccin_window_tabs_enabled off # or off to disable window_tabs
set -g @catppuccin_flavour 'mocha'
set -g @catppuccin_left_separator "ÓÇ¥"  # half open round block: ‚ó¢ ‚ó§ ‚ó£ ‚ó• ‚ñà ‚ñå ‚ñê ‚ñÄ ‚ñÑ 
set -g @catppuccin_right_separator "ÓÇ∂"
set -g @catppuccin_date_time "%H:%M"

# set -g @t-fzf-prompt 'ÓØà  '
# set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'

run ~/.config/tmux/plugins/tpm/tpm

#run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux
#run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux
